
AVR_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000174  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000174  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000810  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b78  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001584  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  78:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ADC_init>:
#include <avr/interrupt.h>

#include "stdutils.h"
#include "adc.h"

void ADC_init(){
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
	// set prescaler, division factor of 128, 125KHZ sample rate
	ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
  88:	8a e7       	ldi	r24, 0x7A	; 122
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	2a e7       	ldi	r18, 0x7A	; 122
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	f9 01       	movw	r30, r18
  92:	20 81       	ld	r18, Z
  94:	27 60       	ori	r18, 0x07	; 7
  96:	fc 01       	movw	r30, r24
  98:	20 83       	st	Z, r18
	// set REf voltage to AVCC
	ADMUX |= (1<<REFS0);
  9a:	8c e7       	ldi	r24, 0x7C	; 124
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	2c e7       	ldi	r18, 0x7C	; 124
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	f9 01       	movw	r30, r18
  a4:	20 81       	ld	r18, Z
  a6:	20 64       	ori	r18, 0x40	; 64
  a8:	fc 01       	movw	r30, r24
  aa:	20 83       	st	Z, r18
	// select channel ADC5
	ADMUX |= (1<<MUX0) | (1<<MUX2);
  ac:	8c e7       	ldi	r24, 0x7C	; 124
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	2c e7       	ldi	r18, 0x7C	; 124
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	f9 01       	movw	r30, r18
  b6:	20 81       	ld	r18, Z
  b8:	25 60       	ori	r18, 0x05	; 5
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18
	// left adjust the ADC value, for 8 bit precision
	ADMUX |= (1<<ADLAR);
  be:	8c e7       	ldi	r24, 0x7C	; 124
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	2c e7       	ldi	r18, 0x7C	; 124
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	f9 01       	movw	r30, r18
  c8:	20 81       	ld	r18, Z
  ca:	20 62       	ori	r18, 0x20	; 32
  cc:	fc 01       	movw	r30, r24
  ce:	20 83       	st	Z, r18
	// enable the ADC
	ADCSRA |= (1<<ADEN);
  d0:	8a e7       	ldi	r24, 0x7A	; 122
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	2a e7       	ldi	r18, 0x7A	; 122
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	f9 01       	movw	r30, r18
  da:	20 81       	ld	r18, Z
  dc:	20 68       	ori	r18, 0x80	; 128
  de:	fc 01       	movw	r30, r24
  e0:	20 83       	st	Z, r18
	// enable ADC interrupt
	ADCSRA |= (1<<ADIE);
  e2:	8a e7       	ldi	r24, 0x7A	; 122
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	2a e7       	ldi	r18, 0x7A	; 122
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	f9 01       	movw	r30, r18
  ec:	20 81       	ld	r18, Z
  ee:	28 60       	ori	r18, 0x08	; 8
  f0:	fc 01       	movw	r30, r24
  f2:	20 83       	st	Z, r18
}
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <ADC_start_conversion>:

void ADC_start_conversion(){
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1<<ADSC);
 102:	8a e7       	ldi	r24, 0x7A	; 122
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	2a e7       	ldi	r18, 0x7A	; 122
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	f9 01       	movw	r30, r18
 10c:	20 81       	ld	r18, Z
 10e:	20 64       	ori	r18, 0x40	; 64
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <main>:
#include <avr/interrupt.h>

#include "stdutils.h"
#include "adc.h"

int main(void){
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
	// Configure PORTB PIN5 as output
	DDRB |= (1<<DDB5);
 122:	84 e2       	ldi	r24, 0x24	; 36
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	24 e2       	ldi	r18, 0x24	; 36
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	f9 01       	movw	r30, r18
 12c:	20 81       	ld	r18, Z
 12e:	20 62       	ori	r18, 0x20	; 32
 130:	fc 01       	movw	r30, r24
 132:	20 83       	st	Z, r18
	ADC_init();
 134:	0e 94 40 00 	call	0x80	; 0x80 <ADC_init>
	ADC_start_conversion();
 138:	0e 94 7d 00 	call	0xfa	; 0xfa <ADC_start_conversion>

	while(1){
		// check adc value, set LED accordingly
		if(ADCH > 128){
 13c:	89 e7       	ldi	r24, 0x79	; 121
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	fc 01       	movw	r30, r24
 142:	80 81       	ld	r24, Z
 144:	81 38       	cpi	r24, 0x81	; 129
 146:	50 f0       	brcs	.+20     	; 0x15c <main+0x42>
			PORTB |= (1<<PORTB5);
 148:	85 e2       	ldi	r24, 0x25	; 37
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	25 e2       	ldi	r18, 0x25	; 37
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	f9 01       	movw	r30, r18
 152:	20 81       	ld	r18, Z
 154:	20 62       	ori	r18, 0x20	; 32
 156:	fc 01       	movw	r30, r24
 158:	20 83       	st	Z, r18
 15a:	09 c0       	rjmp	.+18     	; 0x16e <main+0x54>
		}else{
			PORTB &= ~(1<<PORTB5);
 15c:	85 e2       	ldi	r24, 0x25	; 37
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	25 e2       	ldi	r18, 0x25	; 37
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	f9 01       	movw	r30, r18
 166:	20 81       	ld	r18, Z
 168:	2f 7d       	andi	r18, 0xDF	; 223
 16a:	fc 01       	movw	r30, r24
 16c:	20 83       	st	Z, r18
		}

	}
 16e:	e6 cf       	rjmp	.-52     	; 0x13c <main+0x22>

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
