
AVR_USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000056c  00000600  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000056c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800108  00800108  00000608  2**0
                  ALLOC
  3 .stab         00000ad4  00000000  00000000  00000608  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cf1  00000000  00000000  000010dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001dcd  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001de0  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e6       	ldi	r30, 0x6C	; 108
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 31       	cpi	r26, 0x1D	; 29
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 b4 02 	jmp	0x568	; 0x568 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "stdutils.h"

char input;
char* msg = "hello";

int main(){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	2e 97       	sbiw	r28, 0x0e	; 14
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
	usart_init();
  ba:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <usart_init>
	sei();
  be:	78 94       	sei
	while(1){
		send_string(msg);
  c0:	80 91 00 01 	lds	r24, 0x0100
  c4:	90 91 01 01 	lds	r25, 0x0101
  c8:	0e 94 24 01 	call	0x248	; 0x248 <send_string>
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	90 e4       	ldi	r25, 0x40	; 64
  d0:	ac e9       	ldi	r26, 0x9C	; 156
  d2:	b5 e4       	ldi	r27, 0x45	; 69
  d4:	89 83       	std	Y+1, r24	; 0x01
  d6:	9a 83       	std	Y+2, r25	; 0x02
  d8:	ab 83       	std	Y+3, r26	; 0x03
  da:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  dc:	20 e0       	ldi	r18, 0x00	; 0
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	4a e7       	ldi	r20, 0x7A	; 122
  e2:	55 e4       	ldi	r21, 0x45	; 69
  e4:	69 81       	ldd	r22, Y+1	; 0x01
  e6:	7a 81       	ldd	r23, Y+2	; 0x02
  e8:	8b 81       	ldd	r24, Y+3	; 0x03
  ea:	9c 81       	ldd	r25, Y+4	; 0x04
  ec:	0e 94 16 02 	call	0x42c	; 0x42c <__mulsf3>
  f0:	dc 01       	movw	r26, r24
  f2:	cb 01       	movw	r24, r22
  f4:	8d 83       	std	Y+5, r24	; 0x05
  f6:	9e 83       	std	Y+6, r25	; 0x06
  f8:	af 83       	std	Y+7, r26	; 0x07
  fa:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	40 e8       	ldi	r20, 0x80	; 128
 102:	5f e3       	ldi	r21, 0x3F	; 63
 104:	6d 81       	ldd	r22, Y+5	; 0x05
 106:	7e 81       	ldd	r23, Y+6	; 0x06
 108:	8f 81       	ldd	r24, Y+7	; 0x07
 10a:	98 85       	ldd	r25, Y+8	; 0x08
 10c:	0e 94 90 01 	call	0x320	; 0x320 <__cmpsf2>
 110:	88 23       	and	r24, r24
 112:	2c f4       	brge	.+10     	; 0x11e <main+0x78>
		__ticks = 1;
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	9a 87       	std	Y+10, r25	; 0x0a
 11a:	89 87       	std	Y+9, r24	; 0x09
 11c:	3f c0       	rjmp	.+126    	; 0x19c <main+0xf6>
	else if (__tmp > 65535)
 11e:	20 e0       	ldi	r18, 0x00	; 0
 120:	3f ef       	ldi	r19, 0xFF	; 255
 122:	4f e7       	ldi	r20, 0x7F	; 127
 124:	57 e4       	ldi	r21, 0x47	; 71
 126:	6d 81       	ldd	r22, Y+5	; 0x05
 128:	7e 81       	ldd	r23, Y+6	; 0x06
 12a:	8f 81       	ldd	r24, Y+7	; 0x07
 12c:	98 85       	ldd	r25, Y+8	; 0x08
 12e:	0e 94 11 02 	call	0x422	; 0x422 <__gesf2>
 132:	18 16       	cp	r1, r24
 134:	4c f5       	brge	.+82     	; 0x188 <main+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	40 e2       	ldi	r20, 0x20	; 32
 13c:	51 e4       	ldi	r21, 0x41	; 65
 13e:	69 81       	ldd	r22, Y+1	; 0x01
 140:	7a 81       	ldd	r23, Y+2	; 0x02
 142:	8b 81       	ldd	r24, Y+3	; 0x03
 144:	9c 81       	ldd	r25, Y+4	; 0x04
 146:	0e 94 16 02 	call	0x42c	; 0x42c <__mulsf3>
 14a:	dc 01       	movw	r26, r24
 14c:	cb 01       	movw	r24, r22
 14e:	bc 01       	movw	r22, r24
 150:	cd 01       	movw	r24, r26
 152:	0e 94 95 01 	call	0x32a	; 0x32a <__fixunssfsi>
 156:	dc 01       	movw	r26, r24
 158:	cb 01       	movw	r24, r22
 15a:	9a 87       	std	Y+10, r25	; 0x0a
 15c:	89 87       	std	Y+9, r24	; 0x09
 15e:	0f c0       	rjmp	.+30     	; 0x17e <main+0xd8>
 160:	80 e9       	ldi	r24, 0x90	; 144
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	9c 87       	std	Y+12, r25	; 0x0c
 166:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 168:	8b 85       	ldd	r24, Y+11	; 0x0b
 16a:	9c 85       	ldd	r25, Y+12	; 0x0c
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <main+0xc6>
 170:	9c 87       	std	Y+12, r25	; 0x0c
 172:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 174:	89 85       	ldd	r24, Y+9	; 0x09
 176:	9a 85       	ldd	r25, Y+10	; 0x0a
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	9a 87       	std	Y+10, r25	; 0x0a
 17c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 17e:	89 85       	ldd	r24, Y+9	; 0x09
 180:	9a 85       	ldd	r25, Y+10	; 0x0a
 182:	89 2b       	or	r24, r25
 184:	69 f7       	brne	.-38     	; 0x160 <main+0xba>
 186:	14 c0       	rjmp	.+40     	; 0x1b0 <main+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 188:	6d 81       	ldd	r22, Y+5	; 0x05
 18a:	7e 81       	ldd	r23, Y+6	; 0x06
 18c:	8f 81       	ldd	r24, Y+7	; 0x07
 18e:	98 85       	ldd	r25, Y+8	; 0x08
 190:	0e 94 95 01 	call	0x32a	; 0x32a <__fixunssfsi>
 194:	dc 01       	movw	r26, r24
 196:	cb 01       	movw	r24, r22
 198:	9a 87       	std	Y+10, r25	; 0x0a
 19a:	89 87       	std	Y+9, r24	; 0x09
 19c:	89 85       	ldd	r24, Y+9	; 0x09
 19e:	9a 85       	ldd	r25, Y+10	; 0x0a
 1a0:	9e 87       	std	Y+14, r25	; 0x0e
 1a2:	8d 87       	std	Y+13, r24	; 0x0d
 1a4:	8d 85       	ldd	r24, Y+13	; 0x0d
 1a6:	9e 85       	ldd	r25, Y+14	; 0x0e
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <main+0x102>
 1ac:	9e 87       	std	Y+14, r25	; 0x0e
 1ae:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(5000);
	}
 1b0:	87 cf       	rjmp	.-242    	; 0xc0 <main+0x1a>

000001b2 <__vector_18>:
return 0;
}

/* Receive character using interrupt */
ISR(USART_RX_vect){
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	00 90 5f 00 	lds	r0, 0x005F
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	cd b7       	in	r28, 0x3d	; 61
 1c4:	de b7       	in	r29, 0x3e	; 62
	//send_string(msg);
}
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	0f 90       	pop	r0
 1cc:	00 92 5f 00 	sts	0x005F, r0
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <usart_init>:
#include "usart.h"
#include "stdutils.h"


/* Initialize usart */
void usart_init(){
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	cd b7       	in	r28, 0x3d	; 61
 1dc:	de b7       	in	r29, 0x3e	; 62
	 UBRR0H = (M_UBRR >> 8);	// setting baud rate
 1de:	85 ec       	ldi	r24, 0xC5	; 197
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	fc 01       	movw	r30, r24
 1e4:	10 82       	st	Z, r1
	 UBRR0L = M_UBRR;
 1e6:	84 ec       	ldi	r24, 0xC4	; 196
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	27 e6       	ldi	r18, 0x67	; 103
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 83       	st	Z, r18
	 UCSR0B = (1<<TXEN0) | (1<<RXEN0) | (1<<RXCIE0);	// enable transmitter and receiver
 1f0:	81 ec       	ldi	r24, 0xC1	; 193
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	28 e9       	ldi	r18, 0x98	; 152
 1f6:	fc 01       	movw	r30, r24
 1f8:	20 83       	st	Z, r18
	 UCSR0C = (1<<USBS0);	// 2 stop bit
 1fa:	82 ec       	ldi	r24, 0xC2	; 194
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	28 e0       	ldi	r18, 0x08	; 8
 200:	fc 01       	movw	r30, r24
 202:	20 83       	st	Z, r18
	 UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);
 204:	82 ec       	ldi	r24, 0xC2	; 194
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	26 e0       	ldi	r18, 0x06	; 6
 20a:	fc 01       	movw	r30, r24
 20c:	20 83       	st	Z, r18
 }
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <send_char>:


/* Send character */
void send_char(char byte){
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	1f 92       	push	r1
 21a:	cd b7       	in	r28, 0x3d	; 61
 21c:	de b7       	in	r29, 0x3e	; 62
 21e:	89 83       	std	Y+1, r24	; 0x01
	 while (!(UCSR0A & (bit(UDRE0))));	// wait until the register is empty
 220:	00 00       	nop
 222:	80 ec       	ldi	r24, 0xC0	; 192
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	fc 01       	movw	r30, r24
 228:	80 81       	ld	r24, Z
 22a:	88 2f       	mov	r24, r24
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	80 72       	andi	r24, 0x20	; 32
 230:	99 27       	eor	r25, r25
 232:	89 2b       	or	r24, r25
 234:	b1 f3       	breq	.-20     	; 0x222 <send_char+0xe>
	 UDR0 = byte;	// put a char in the UDR0 register
 236:	86 ec       	ldi	r24, 0xC6	; 198
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	29 81       	ldd	r18, Y+1	; 0x01
 23c:	fc 01       	movw	r30, r24
 23e:	20 83       	st	Z, r18
 }
 240:	0f 90       	pop	r0
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	08 95       	ret

00000248 <send_string>:

/* Send character array  */
 void send_string(char* string){
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	00 d0       	rcall	.+0      	; 0x24e <send_string+0x6>
 24e:	00 d0       	rcall	.+0      	; 0x250 <send_string+0x8>
 250:	00 d0       	rcall	.+0      	; 0x252 <send_string+0xa>
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
 256:	9e 83       	std	Y+6, r25	; 0x06
 258:	8d 83       	std	Y+5, r24	; 0x05
	 int i;
	 int len = strlen(string);
 25a:	8d 81       	ldd	r24, Y+5	; 0x05
 25c:	9e 81       	ldd	r25, Y+6	; 0x06
 25e:	0e 94 ab 02 	call	0x556	; 0x556 <strlen>
 262:	9c 83       	std	Y+4, r25	; 0x04
 264:	8b 83       	std	Y+3, r24	; 0x03
	 	for (i=0; i<len; i++){
 266:	1a 82       	std	Y+2, r1	; 0x02
 268:	19 82       	std	Y+1, r1	; 0x01
 26a:	0f c0       	rjmp	.+30     	; 0x28a <send_string+0x42>
	 		send_char(string[i]);
 26c:	89 81       	ldd	r24, Y+1	; 0x01
 26e:	9a 81       	ldd	r25, Y+2	; 0x02
 270:	2d 81       	ldd	r18, Y+5	; 0x05
 272:	3e 81       	ldd	r19, Y+6	; 0x06
 274:	82 0f       	add	r24, r18
 276:	93 1f       	adc	r25, r19
 278:	fc 01       	movw	r30, r24
 27a:	80 81       	ld	r24, Z
 27c:	0e 94 0a 01 	call	0x214	; 0x214 <send_char>

/* Send character array  */
 void send_string(char* string){
	 int i;
	 int len = strlen(string);
	 	for (i=0; i<len; i++){
 280:	89 81       	ldd	r24, Y+1	; 0x01
 282:	9a 81       	ldd	r25, Y+2	; 0x02
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	9a 83       	std	Y+2, r25	; 0x02
 288:	89 83       	std	Y+1, r24	; 0x01
 28a:	29 81       	ldd	r18, Y+1	; 0x01
 28c:	3a 81       	ldd	r19, Y+2	; 0x02
 28e:	8b 81       	ldd	r24, Y+3	; 0x03
 290:	9c 81       	ldd	r25, Y+4	; 0x04
 292:	28 17       	cp	r18, r24
 294:	39 07       	cpc	r19, r25
 296:	54 f3       	brlt	.-44     	; 0x26c <send_string+0x24>
	 		send_char(string[i]);
	 	}
 }
 298:	26 96       	adiw	r28, 0x06	; 6
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	f8 94       	cli
 29e:	de bf       	out	0x3e, r29	; 62
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	cd bf       	out	0x3d, r28	; 61
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <get_char>:

/* Get character */
char get_char(){
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	cd b7       	in	r28, 0x3d	; 61
 2b0:	de b7       	in	r29, 0x3e	; 62
	while(!(UCSR0A & (bit(RXC0))));	// wait until all data in receive buffer is read
 2b2:	00 00       	nop
 2b4:	80 ec       	ldi	r24, 0xC0	; 192
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	fc 01       	movw	r30, r24
 2ba:	80 81       	ld	r24, Z
 2bc:	88 23       	and	r24, r24
 2be:	d4 f7       	brge	.-12     	; 0x2b4 <get_char+0xa>
	return UDR0;
 2c0:	86 ec       	ldi	r24, 0xC6	; 198
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	fc 01       	movw	r30, r24
 2c6:	80 81       	ld	r24, Z
}
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <get_string>:

char string[20];

char* get_string(){
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	00 d0       	rcall	.+0      	; 0x2d4 <get_string+0x6>
 2d4:	1f 92       	push	r1
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
	char x;
	int i=0;
 2da:	1a 82       	std	Y+2, r1	; 0x02
 2dc:	19 82       	std	Y+1, r1	; 0x01
	while((x = get_char()) != 13){
 2de:	0c c0       	rjmp	.+24     	; 0x2f8 <get_string+0x2a>
		string[i++] = x;
 2e0:	89 81       	ldd	r24, Y+1	; 0x01
 2e2:	9a 81       	ldd	r25, Y+2	; 0x02
 2e4:	9c 01       	movw	r18, r24
 2e6:	2f 5f       	subi	r18, 0xFF	; 255
 2e8:	3f 4f       	sbci	r19, 0xFF	; 255
 2ea:	3a 83       	std	Y+2, r19	; 0x02
 2ec:	29 83       	std	Y+1, r18	; 0x01
 2ee:	87 5f       	subi	r24, 0xF7	; 247
 2f0:	9e 4f       	sbci	r25, 0xFE	; 254
 2f2:	2b 81       	ldd	r18, Y+3	; 0x03
 2f4:	fc 01       	movw	r30, r24
 2f6:	20 83       	st	Z, r18
char string[20];

char* get_string(){
	char x;
	int i=0;
	while((x = get_char()) != 13){
 2f8:	0e 94 55 01 	call	0x2aa	; 0x2aa <get_char>
 2fc:	8b 83       	std	Y+3, r24	; 0x03
 2fe:	8b 81       	ldd	r24, Y+3	; 0x03
 300:	8d 30       	cpi	r24, 0x0D	; 13
 302:	71 f7       	brne	.-36     	; 0x2e0 <get_string+0x12>
		string[i++] = x;
	}
	string[i] = '\0';
 304:	89 81       	ldd	r24, Y+1	; 0x01
 306:	9a 81       	ldd	r25, Y+2	; 0x02
 308:	87 5f       	subi	r24, 0xF7	; 247
 30a:	9e 4f       	sbci	r25, 0xFE	; 254
 30c:	fc 01       	movw	r30, r24
 30e:	10 82       	st	Z, r1
	return string;
 310:	89 e0       	ldi	r24, 0x09	; 9
 312:	91 e0       	ldi	r25, 0x01	; 1
}
 314:	0f 90       	pop	r0
 316:	0f 90       	pop	r0
 318:	0f 90       	pop	r0
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <__cmpsf2>:
 320:	0e 94 c4 01 	call	0x388	; 0x388 <__fp_cmp>
 324:	08 f4       	brcc	.+2      	; 0x328 <__cmpsf2+0x8>
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	08 95       	ret

0000032a <__fixunssfsi>:
 32a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <__fp_splitA>
 32e:	88 f0       	brcs	.+34     	; 0x352 <__fixunssfsi+0x28>
 330:	9f 57       	subi	r25, 0x7F	; 127
 332:	98 f0       	brcs	.+38     	; 0x35a <__fixunssfsi+0x30>
 334:	b9 2f       	mov	r27, r25
 336:	99 27       	eor	r25, r25
 338:	b7 51       	subi	r27, 0x17	; 23
 33a:	b0 f0       	brcs	.+44     	; 0x368 <__fixunssfsi+0x3e>
 33c:	e1 f0       	breq	.+56     	; 0x376 <__fixunssfsi+0x4c>
 33e:	66 0f       	add	r22, r22
 340:	77 1f       	adc	r23, r23
 342:	88 1f       	adc	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	1a f0       	brmi	.+6      	; 0x34e <__fixunssfsi+0x24>
 348:	ba 95       	dec	r27
 34a:	c9 f7       	brne	.-14     	; 0x33e <__fixunssfsi+0x14>
 34c:	14 c0       	rjmp	.+40     	; 0x376 <__fixunssfsi+0x4c>
 34e:	b1 30       	cpi	r27, 0x01	; 1
 350:	91 f0       	breq	.+36     	; 0x376 <__fixunssfsi+0x4c>
 352:	0e 94 0a 02 	call	0x414	; 0x414 <__fp_zero>
 356:	b1 e0       	ldi	r27, 0x01	; 1
 358:	08 95       	ret
 35a:	0c 94 0a 02 	jmp	0x414	; 0x414 <__fp_zero>
 35e:	67 2f       	mov	r22, r23
 360:	78 2f       	mov	r23, r24
 362:	88 27       	eor	r24, r24
 364:	b8 5f       	subi	r27, 0xF8	; 248
 366:	39 f0       	breq	.+14     	; 0x376 <__fixunssfsi+0x4c>
 368:	b9 3f       	cpi	r27, 0xF9	; 249
 36a:	cc f3       	brlt	.-14     	; 0x35e <__fixunssfsi+0x34>
 36c:	86 95       	lsr	r24
 36e:	77 95       	ror	r23
 370:	67 95       	ror	r22
 372:	b3 95       	inc	r27
 374:	d9 f7       	brne	.-10     	; 0x36c <__fixunssfsi+0x42>
 376:	3e f4       	brtc	.+14     	; 0x386 <__fixunssfsi+0x5c>
 378:	90 95       	com	r25
 37a:	80 95       	com	r24
 37c:	70 95       	com	r23
 37e:	61 95       	neg	r22
 380:	7f 4f       	sbci	r23, 0xFF	; 255
 382:	8f 4f       	sbci	r24, 0xFF	; 255
 384:	9f 4f       	sbci	r25, 0xFF	; 255
 386:	08 95       	ret

00000388 <__fp_cmp>:
 388:	99 0f       	add	r25, r25
 38a:	00 08       	sbc	r0, r0
 38c:	55 0f       	add	r21, r21
 38e:	aa 0b       	sbc	r26, r26
 390:	e0 e8       	ldi	r30, 0x80	; 128
 392:	fe ef       	ldi	r31, 0xFE	; 254
 394:	16 16       	cp	r1, r22
 396:	17 06       	cpc	r1, r23
 398:	e8 07       	cpc	r30, r24
 39a:	f9 07       	cpc	r31, r25
 39c:	c0 f0       	brcs	.+48     	; 0x3ce <__fp_cmp+0x46>
 39e:	12 16       	cp	r1, r18
 3a0:	13 06       	cpc	r1, r19
 3a2:	e4 07       	cpc	r30, r20
 3a4:	f5 07       	cpc	r31, r21
 3a6:	98 f0       	brcs	.+38     	; 0x3ce <__fp_cmp+0x46>
 3a8:	62 1b       	sub	r22, r18
 3aa:	73 0b       	sbc	r23, r19
 3ac:	84 0b       	sbc	r24, r20
 3ae:	95 0b       	sbc	r25, r21
 3b0:	39 f4       	brne	.+14     	; 0x3c0 <__fp_cmp+0x38>
 3b2:	0a 26       	eor	r0, r26
 3b4:	61 f0       	breq	.+24     	; 0x3ce <__fp_cmp+0x46>
 3b6:	23 2b       	or	r18, r19
 3b8:	24 2b       	or	r18, r20
 3ba:	25 2b       	or	r18, r21
 3bc:	21 f4       	brne	.+8      	; 0x3c6 <__fp_cmp+0x3e>
 3be:	08 95       	ret
 3c0:	0a 26       	eor	r0, r26
 3c2:	09 f4       	brne	.+2      	; 0x3c6 <__fp_cmp+0x3e>
 3c4:	a1 40       	sbci	r26, 0x01	; 1
 3c6:	a6 95       	lsr	r26
 3c8:	8f ef       	ldi	r24, 0xFF	; 255
 3ca:	81 1d       	adc	r24, r1
 3cc:	81 1d       	adc	r24, r1
 3ce:	08 95       	ret

000003d0 <__fp_split3>:
 3d0:	57 fd       	sbrc	r21, 7
 3d2:	90 58       	subi	r25, 0x80	; 128
 3d4:	44 0f       	add	r20, r20
 3d6:	55 1f       	adc	r21, r21
 3d8:	59 f0       	breq	.+22     	; 0x3f0 <__fp_splitA+0x10>
 3da:	5f 3f       	cpi	r21, 0xFF	; 255
 3dc:	71 f0       	breq	.+28     	; 0x3fa <__fp_splitA+0x1a>
 3de:	47 95       	ror	r20

000003e0 <__fp_splitA>:
 3e0:	88 0f       	add	r24, r24
 3e2:	97 fb       	bst	r25, 7
 3e4:	99 1f       	adc	r25, r25
 3e6:	61 f0       	breq	.+24     	; 0x400 <__fp_splitA+0x20>
 3e8:	9f 3f       	cpi	r25, 0xFF	; 255
 3ea:	79 f0       	breq	.+30     	; 0x40a <__fp_splitA+0x2a>
 3ec:	87 95       	ror	r24
 3ee:	08 95       	ret
 3f0:	12 16       	cp	r1, r18
 3f2:	13 06       	cpc	r1, r19
 3f4:	14 06       	cpc	r1, r20
 3f6:	55 1f       	adc	r21, r21
 3f8:	f2 cf       	rjmp	.-28     	; 0x3de <__fp_split3+0xe>
 3fa:	46 95       	lsr	r20
 3fc:	f1 df       	rcall	.-30     	; 0x3e0 <__fp_splitA>
 3fe:	08 c0       	rjmp	.+16     	; 0x410 <__fp_splitA+0x30>
 400:	16 16       	cp	r1, r22
 402:	17 06       	cpc	r1, r23
 404:	18 06       	cpc	r1, r24
 406:	99 1f       	adc	r25, r25
 408:	f1 cf       	rjmp	.-30     	; 0x3ec <__fp_splitA+0xc>
 40a:	86 95       	lsr	r24
 40c:	71 05       	cpc	r23, r1
 40e:	61 05       	cpc	r22, r1
 410:	08 94       	sec
 412:	08 95       	ret

00000414 <__fp_zero>:
 414:	e8 94       	clt

00000416 <__fp_szero>:
 416:	bb 27       	eor	r27, r27
 418:	66 27       	eor	r22, r22
 41a:	77 27       	eor	r23, r23
 41c:	cb 01       	movw	r24, r22
 41e:	97 f9       	bld	r25, 7
 420:	08 95       	ret

00000422 <__gesf2>:
 422:	0e 94 c4 01 	call	0x388	; 0x388 <__fp_cmp>
 426:	08 f4       	brcc	.+2      	; 0x42a <__gesf2+0x8>
 428:	8f ef       	ldi	r24, 0xFF	; 255
 42a:	08 95       	ret

0000042c <__mulsf3>:
 42c:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3x>
 430:	0c 94 9a 02 	jmp	0x534	; 0x534 <__fp_round>
 434:	0e 94 8c 02 	call	0x518	; 0x518 <__fp_pscA>
 438:	38 f0       	brcs	.+14     	; 0x448 <__mulsf3+0x1c>
 43a:	0e 94 93 02 	call	0x526	; 0x526 <__fp_pscB>
 43e:	20 f0       	brcs	.+8      	; 0x448 <__mulsf3+0x1c>
 440:	95 23       	and	r25, r21
 442:	11 f0       	breq	.+4      	; 0x448 <__mulsf3+0x1c>
 444:	0c 94 83 02 	jmp	0x506	; 0x506 <__fp_inf>
 448:	0c 94 89 02 	jmp	0x512	; 0x512 <__fp_nan>
 44c:	11 24       	eor	r1, r1
 44e:	0c 94 0b 02 	jmp	0x416	; 0x416 <__fp_szero>

00000452 <__mulsf3x>:
 452:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__fp_split3>
 456:	70 f3       	brcs	.-36     	; 0x434 <__mulsf3+0x8>

00000458 <__mulsf3_pse>:
 458:	95 9f       	mul	r25, r21
 45a:	c1 f3       	breq	.-16     	; 0x44c <__mulsf3+0x20>
 45c:	95 0f       	add	r25, r21
 45e:	50 e0       	ldi	r21, 0x00	; 0
 460:	55 1f       	adc	r21, r21
 462:	62 9f       	mul	r22, r18
 464:	f0 01       	movw	r30, r0
 466:	72 9f       	mul	r23, r18
 468:	bb 27       	eor	r27, r27
 46a:	f0 0d       	add	r31, r0
 46c:	b1 1d       	adc	r27, r1
 46e:	63 9f       	mul	r22, r19
 470:	aa 27       	eor	r26, r26
 472:	f0 0d       	add	r31, r0
 474:	b1 1d       	adc	r27, r1
 476:	aa 1f       	adc	r26, r26
 478:	64 9f       	mul	r22, r20
 47a:	66 27       	eor	r22, r22
 47c:	b0 0d       	add	r27, r0
 47e:	a1 1d       	adc	r26, r1
 480:	66 1f       	adc	r22, r22
 482:	82 9f       	mul	r24, r18
 484:	22 27       	eor	r18, r18
 486:	b0 0d       	add	r27, r0
 488:	a1 1d       	adc	r26, r1
 48a:	62 1f       	adc	r22, r18
 48c:	73 9f       	mul	r23, r19
 48e:	b0 0d       	add	r27, r0
 490:	a1 1d       	adc	r26, r1
 492:	62 1f       	adc	r22, r18
 494:	83 9f       	mul	r24, r19
 496:	a0 0d       	add	r26, r0
 498:	61 1d       	adc	r22, r1
 49a:	22 1f       	adc	r18, r18
 49c:	74 9f       	mul	r23, r20
 49e:	33 27       	eor	r19, r19
 4a0:	a0 0d       	add	r26, r0
 4a2:	61 1d       	adc	r22, r1
 4a4:	23 1f       	adc	r18, r19
 4a6:	84 9f       	mul	r24, r20
 4a8:	60 0d       	add	r22, r0
 4aa:	21 1d       	adc	r18, r1
 4ac:	82 2f       	mov	r24, r18
 4ae:	76 2f       	mov	r23, r22
 4b0:	6a 2f       	mov	r22, r26
 4b2:	11 24       	eor	r1, r1
 4b4:	9f 57       	subi	r25, 0x7F	; 127
 4b6:	50 40       	sbci	r21, 0x00	; 0
 4b8:	9a f0       	brmi	.+38     	; 0x4e0 <__mulsf3_pse+0x88>
 4ba:	f1 f0       	breq	.+60     	; 0x4f8 <__mulsf3_pse+0xa0>
 4bc:	88 23       	and	r24, r24
 4be:	4a f0       	brmi	.+18     	; 0x4d2 <__mulsf3_pse+0x7a>
 4c0:	ee 0f       	add	r30, r30
 4c2:	ff 1f       	adc	r31, r31
 4c4:	bb 1f       	adc	r27, r27
 4c6:	66 1f       	adc	r22, r22
 4c8:	77 1f       	adc	r23, r23
 4ca:	88 1f       	adc	r24, r24
 4cc:	91 50       	subi	r25, 0x01	; 1
 4ce:	50 40       	sbci	r21, 0x00	; 0
 4d0:	a9 f7       	brne	.-22     	; 0x4bc <__mulsf3_pse+0x64>
 4d2:	9e 3f       	cpi	r25, 0xFE	; 254
 4d4:	51 05       	cpc	r21, r1
 4d6:	80 f0       	brcs	.+32     	; 0x4f8 <__mulsf3_pse+0xa0>
 4d8:	0c 94 83 02 	jmp	0x506	; 0x506 <__fp_inf>
 4dc:	0c 94 0b 02 	jmp	0x416	; 0x416 <__fp_szero>
 4e0:	5f 3f       	cpi	r21, 0xFF	; 255
 4e2:	e4 f3       	brlt	.-8      	; 0x4dc <__mulsf3_pse+0x84>
 4e4:	98 3e       	cpi	r25, 0xE8	; 232
 4e6:	d4 f3       	brlt	.-12     	; 0x4dc <__mulsf3_pse+0x84>
 4e8:	86 95       	lsr	r24
 4ea:	77 95       	ror	r23
 4ec:	67 95       	ror	r22
 4ee:	b7 95       	ror	r27
 4f0:	f7 95       	ror	r31
 4f2:	e7 95       	ror	r30
 4f4:	9f 5f       	subi	r25, 0xFF	; 255
 4f6:	c1 f7       	brne	.-16     	; 0x4e8 <__mulsf3_pse+0x90>
 4f8:	fe 2b       	or	r31, r30
 4fa:	88 0f       	add	r24, r24
 4fc:	91 1d       	adc	r25, r1
 4fe:	96 95       	lsr	r25
 500:	87 95       	ror	r24
 502:	97 f9       	bld	r25, 7
 504:	08 95       	ret

00000506 <__fp_inf>:
 506:	97 f9       	bld	r25, 7
 508:	9f 67       	ori	r25, 0x7F	; 127
 50a:	80 e8       	ldi	r24, 0x80	; 128
 50c:	70 e0       	ldi	r23, 0x00	; 0
 50e:	60 e0       	ldi	r22, 0x00	; 0
 510:	08 95       	ret

00000512 <__fp_nan>:
 512:	9f ef       	ldi	r25, 0xFF	; 255
 514:	80 ec       	ldi	r24, 0xC0	; 192
 516:	08 95       	ret

00000518 <__fp_pscA>:
 518:	00 24       	eor	r0, r0
 51a:	0a 94       	dec	r0
 51c:	16 16       	cp	r1, r22
 51e:	17 06       	cpc	r1, r23
 520:	18 06       	cpc	r1, r24
 522:	09 06       	cpc	r0, r25
 524:	08 95       	ret

00000526 <__fp_pscB>:
 526:	00 24       	eor	r0, r0
 528:	0a 94       	dec	r0
 52a:	12 16       	cp	r1, r18
 52c:	13 06       	cpc	r1, r19
 52e:	14 06       	cpc	r1, r20
 530:	05 06       	cpc	r0, r21
 532:	08 95       	ret

00000534 <__fp_round>:
 534:	09 2e       	mov	r0, r25
 536:	03 94       	inc	r0
 538:	00 0c       	add	r0, r0
 53a:	11 f4       	brne	.+4      	; 0x540 <__fp_round+0xc>
 53c:	88 23       	and	r24, r24
 53e:	52 f0       	brmi	.+20     	; 0x554 <__fp_round+0x20>
 540:	bb 0f       	add	r27, r27
 542:	40 f4       	brcc	.+16     	; 0x554 <__fp_round+0x20>
 544:	bf 2b       	or	r27, r31
 546:	11 f4       	brne	.+4      	; 0x54c <__fp_round+0x18>
 548:	60 ff       	sbrs	r22, 0
 54a:	04 c0       	rjmp	.+8      	; 0x554 <__fp_round+0x20>
 54c:	6f 5f       	subi	r22, 0xFF	; 255
 54e:	7f 4f       	sbci	r23, 0xFF	; 255
 550:	8f 4f       	sbci	r24, 0xFF	; 255
 552:	9f 4f       	sbci	r25, 0xFF	; 255
 554:	08 95       	ret

00000556 <strlen>:
 556:	fc 01       	movw	r30, r24
 558:	01 90       	ld	r0, Z+
 55a:	00 20       	and	r0, r0
 55c:	e9 f7       	brne	.-6      	; 0x558 <strlen+0x2>
 55e:	80 95       	com	r24
 560:	90 95       	com	r25
 562:	8e 0f       	add	r24, r30
 564:	9f 1f       	adc	r25, r31
 566:	08 95       	ret

00000568 <_exit>:
 568:	f8 94       	cli

0000056a <__stop_program>:
 56a:	ff cf       	rjmp	.-2      	; 0x56a <__stop_program>
