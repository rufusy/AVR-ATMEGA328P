
AVR_USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000059c  00000630  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000059c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800108  00800108  00000638  2**0
                  ALLOC
  3 .stab         00000a5c  00000000  00000000  00000638  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ca2  00000000  00000000  00001094  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001d36  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d48  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e9       	ldi	r30, 0x9C	; 156
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 30       	cpi	r26, 0x09	; 9
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 cc 02 	jmp	0x598	; 0x598 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "stdutils.h"

char input;
char* msg = "hello";

int main(){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	2e 97       	sbiw	r28, 0x0e	; 14
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
	usart_init();
  ba:	0e 94 05 01 	call	0x20a	; 0x20a <usart_init>
	sei();
  be:	78 94       	sei
	for(;;){

		send_char(input);
  c0:	80 91 08 01 	lds	r24, 0x0108
  c4:	0e 94 4b 01 	call	0x296	; 0x296 <send_char>
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	aa e7       	ldi	r26, 0x7A	; 122
  ce:	b4 e4       	ldi	r27, 0x44	; 68
  d0:	89 83       	std	Y+1, r24	; 0x01
  d2:	9a 83       	std	Y+2, r25	; 0x02
  d4:	ab 83       	std	Y+3, r26	; 0x03
  d6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  d8:	20 e0       	ldi	r18, 0x00	; 0
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	4a e7       	ldi	r20, 0x7A	; 122
  de:	55 e4       	ldi	r21, 0x45	; 69
  e0:	69 81       	ldd	r22, Y+1	; 0x01
  e2:	7a 81       	ldd	r23, Y+2	; 0x02
  e4:	8b 81       	ldd	r24, Y+3	; 0x03
  e6:	9c 81       	ldd	r25, Y+4	; 0x04
  e8:	0e 94 2e 02 	call	0x45c	; 0x45c <__mulsf3>
  ec:	dc 01       	movw	r26, r24
  ee:	cb 01       	movw	r24, r22
  f0:	8d 83       	std	Y+5, r24	; 0x05
  f2:	9e 83       	std	Y+6, r25	; 0x06
  f4:	af 83       	std	Y+7, r26	; 0x07
  f6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	40 e8       	ldi	r20, 0x80	; 128
  fe:	5f e3       	ldi	r21, 0x3F	; 63
 100:	6d 81       	ldd	r22, Y+5	; 0x05
 102:	7e 81       	ldd	r23, Y+6	; 0x06
 104:	8f 81       	ldd	r24, Y+7	; 0x07
 106:	98 85       	ldd	r25, Y+8	; 0x08
 108:	0e 94 a8 01 	call	0x350	; 0x350 <__cmpsf2>
 10c:	88 23       	and	r24, r24
 10e:	2c f4       	brge	.+10     	; 0x11a <main+0x74>
		__ticks = 1;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	9a 87       	std	Y+10, r25	; 0x0a
 116:	89 87       	std	Y+9, r24	; 0x09
 118:	3f c0       	rjmp	.+126    	; 0x198 <main+0xf2>
	else if (__tmp > 65535)
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	3f ef       	ldi	r19, 0xFF	; 255
 11e:	4f e7       	ldi	r20, 0x7F	; 127
 120:	57 e4       	ldi	r21, 0x47	; 71
 122:	6d 81       	ldd	r22, Y+5	; 0x05
 124:	7e 81       	ldd	r23, Y+6	; 0x06
 126:	8f 81       	ldd	r24, Y+7	; 0x07
 128:	98 85       	ldd	r25, Y+8	; 0x08
 12a:	0e 94 29 02 	call	0x452	; 0x452 <__gesf2>
 12e:	18 16       	cp	r1, r24
 130:	4c f5       	brge	.+82     	; 0x184 <main+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	40 e2       	ldi	r20, 0x20	; 32
 138:	51 e4       	ldi	r21, 0x41	; 65
 13a:	69 81       	ldd	r22, Y+1	; 0x01
 13c:	7a 81       	ldd	r23, Y+2	; 0x02
 13e:	8b 81       	ldd	r24, Y+3	; 0x03
 140:	9c 81       	ldd	r25, Y+4	; 0x04
 142:	0e 94 2e 02 	call	0x45c	; 0x45c <__mulsf3>
 146:	dc 01       	movw	r26, r24
 148:	cb 01       	movw	r24, r22
 14a:	bc 01       	movw	r22, r24
 14c:	cd 01       	movw	r24, r26
 14e:	0e 94 ad 01 	call	0x35a	; 0x35a <__fixunssfsi>
 152:	dc 01       	movw	r26, r24
 154:	cb 01       	movw	r24, r22
 156:	9a 87       	std	Y+10, r25	; 0x0a
 158:	89 87       	std	Y+9, r24	; 0x09
 15a:	0f c0       	rjmp	.+30     	; 0x17a <main+0xd4>
 15c:	80 e9       	ldi	r24, 0x90	; 144
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	9c 87       	std	Y+12, r25	; 0x0c
 162:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 164:	8b 85       	ldd	r24, Y+11	; 0x0b
 166:	9c 85       	ldd	r25, Y+12	; 0x0c
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <main+0xc2>
 16c:	9c 87       	std	Y+12, r25	; 0x0c
 16e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 170:	89 85       	ldd	r24, Y+9	; 0x09
 172:	9a 85       	ldd	r25, Y+10	; 0x0a
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	9a 87       	std	Y+10, r25	; 0x0a
 178:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 17a:	89 85       	ldd	r24, Y+9	; 0x09
 17c:	9a 85       	ldd	r25, Y+10	; 0x0a
 17e:	89 2b       	or	r24, r25
 180:	69 f7       	brne	.-38     	; 0x15c <main+0xb6>
 182:	14 c0       	rjmp	.+40     	; 0x1ac <main+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 184:	6d 81       	ldd	r22, Y+5	; 0x05
 186:	7e 81       	ldd	r23, Y+6	; 0x06
 188:	8f 81       	ldd	r24, Y+7	; 0x07
 18a:	98 85       	ldd	r25, Y+8	; 0x08
 18c:	0e 94 ad 01 	call	0x35a	; 0x35a <__fixunssfsi>
 190:	dc 01       	movw	r26, r24
 192:	cb 01       	movw	r24, r22
 194:	9a 87       	std	Y+10, r25	; 0x0a
 196:	89 87       	std	Y+9, r24	; 0x09
 198:	89 85       	ldd	r24, Y+9	; 0x09
 19a:	9a 85       	ldd	r25, Y+10	; 0x0a
 19c:	9e 87       	std	Y+14, r25	; 0x0e
 19e:	8d 87       	std	Y+13, r24	; 0x0d
 1a0:	8d 85       	ldd	r24, Y+13	; 0x0d
 1a2:	9e 85       	ldd	r25, Y+14	; 0x0e
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <main+0xfe>
 1a8:	9e 87       	std	Y+14, r25	; 0x0e
 1aa:	8d 87       	std	Y+13, r24	; 0x0d
		/*
		send_string(msg);
		_delay_ms(1000);
		*/

	}
 1ac:	89 cf       	rjmp	.-238    	; 0xc0 <main+0x1a>

000001ae <__vector_18>:
	return 0;
}


// receive characters via interrupts
ISR(USART_RX_vect){
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	00 90 5f 00 	lds	r0, 0x005F
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	2f 93       	push	r18
 1bc:	3f 93       	push	r19
 1be:	4f 93       	push	r20
 1c0:	5f 93       	push	r21
 1c2:	6f 93       	push	r22
 1c4:	7f 93       	push	r23
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
 1ca:	af 93       	push	r26
 1cc:	bf 93       	push	r27
 1ce:	ef 93       	push	r30
 1d0:	ff 93       	push	r31
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	cd b7       	in	r28, 0x3d	; 61
 1d8:	de b7       	in	r29, 0x3e	; 62
	input = get_char();
 1da:	0e 94 96 01 	call	0x32c	; 0x32c <get_char>
 1de:	80 93 08 01 	sts	0x0108, r24
}
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	ff 91       	pop	r31
 1e8:	ef 91       	pop	r30
 1ea:	bf 91       	pop	r27
 1ec:	af 91       	pop	r26
 1ee:	9f 91       	pop	r25
 1f0:	8f 91       	pop	r24
 1f2:	7f 91       	pop	r23
 1f4:	6f 91       	pop	r22
 1f6:	5f 91       	pop	r21
 1f8:	4f 91       	pop	r20
 1fa:	3f 91       	pop	r19
 1fc:	2f 91       	pop	r18
 1fe:	0f 90       	pop	r0
 200:	00 92 5f 00 	sts	0x005F, r0
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <usart_init>:
#include "stdutils.h"



//	initialize
void usart_init(){
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62
	 UBRR0H = (M_UBRR >> 8);	//	set baud rate
 212:	85 ec       	ldi	r24, 0xC5	; 197
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	fc 01       	movw	r30, r24
 218:	10 82       	st	Z, r1
	 UBRR0L = M_UBRR;	//	set baud rate
 21a:	84 ec       	ldi	r24, 0xC4	; 196
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	27 e6       	ldi	r18, 0x67	; 103
 220:	fc 01       	movw	r30, r24
 222:	20 83       	st	Z, r18
	 sbit(UCSR0B,TXEN0);	// 	enable transmitter
 224:	81 ec       	ldi	r24, 0xC1	; 193
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	21 ec       	ldi	r18, 0xC1	; 193
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	f9 01       	movw	r30, r18
 22e:	20 81       	ld	r18, Z
 230:	28 60       	ori	r18, 0x08	; 8
 232:	fc 01       	movw	r30, r24
 234:	20 83       	st	Z, r18
	 sbit(UCSR0B,RXEN0);	// 	enable receiver
 236:	81 ec       	ldi	r24, 0xC1	; 193
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	21 ec       	ldi	r18, 0xC1	; 193
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	f9 01       	movw	r30, r18
 240:	20 81       	ld	r18, Z
 242:	20 61       	ori	r18, 0x10	; 16
 244:	fc 01       	movw	r30, r24
 246:	20 83       	st	Z, r18
	 sbit(UCSR0B,RXCIE0);	// 	enable receiver interrupt
 248:	81 ec       	ldi	r24, 0xC1	; 193
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	21 ec       	ldi	r18, 0xC1	; 193
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	f9 01       	movw	r30, r18
 252:	20 81       	ld	r18, Z
 254:	20 68       	ori	r18, 0x80	; 128
 256:	fc 01       	movw	r30, r24
 258:	20 83       	st	Z, r18
	 sbit(UCSR0C,USBS0);	//	enable 2 stop bit
 25a:	82 ec       	ldi	r24, 0xC2	; 194
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	22 ec       	ldi	r18, 0xC2	; 194
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	f9 01       	movw	r30, r18
 264:	20 81       	ld	r18, Z
 266:	28 60       	ori	r18, 0x08	; 8
 268:	fc 01       	movw	r30, r24
 26a:	20 83       	st	Z, r18
	 sbit(UCSR0C,UCSZ00);	//	enable 8 bit character size
 26c:	82 ec       	ldi	r24, 0xC2	; 194
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	22 ec       	ldi	r18, 0xC2	; 194
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	f9 01       	movw	r30, r18
 276:	20 81       	ld	r18, Z
 278:	22 60       	ori	r18, 0x02	; 2
 27a:	fc 01       	movw	r30, r24
 27c:	20 83       	st	Z, r18
	 sbit(UCSR0C,UCSZ01);	// 	enable 8 bit character size
 27e:	82 ec       	ldi	r24, 0xC2	; 194
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	22 ec       	ldi	r18, 0xC2	; 194
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	f9 01       	movw	r30, r18
 288:	20 81       	ld	r18, Z
 28a:	24 60       	ori	r18, 0x04	; 4
 28c:	fc 01       	movw	r30, r24
 28e:	20 83       	st	Z, r18
}
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <send_char>:

//	send character
void send_char(char byte){
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	1f 92       	push	r1
 29c:	cd b7       	in	r28, 0x3d	; 61
 29e:	de b7       	in	r29, 0x3e	; 62
 2a0:	89 83       	std	Y+1, r24	; 0x01
	 while (!(UCSR0A & (bit(UDRE0))));	//	wait until the register is empty
 2a2:	00 00       	nop
 2a4:	80 ec       	ldi	r24, 0xC0	; 192
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	fc 01       	movw	r30, r24
 2aa:	80 81       	ld	r24, Z
 2ac:	88 2f       	mov	r24, r24
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	80 72       	andi	r24, 0x20	; 32
 2b2:	99 27       	eor	r25, r25
 2b4:	89 2b       	or	r24, r25
 2b6:	b1 f3       	breq	.-20     	; 0x2a4 <send_char+0xe>
	 UDR0 = byte;	//	put a char in the UDR0 register
 2b8:	86 ec       	ldi	r24, 0xC6	; 198
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	29 81       	ldd	r18, Y+1	; 0x01
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18
 }
 2c2:	0f 90       	pop	r0
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <send_string>:

//	send string
void send_string(char* string){
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	00 d0       	rcall	.+0      	; 0x2d0 <send_string+0x6>
 2d0:	00 d0       	rcall	.+0      	; 0x2d2 <send_string+0x8>
 2d2:	00 d0       	rcall	.+0      	; 0x2d4 <send_string+0xa>
 2d4:	cd b7       	in	r28, 0x3d	; 61
 2d6:	de b7       	in	r29, 0x3e	; 62
 2d8:	9e 83       	std	Y+6, r25	; 0x06
 2da:	8d 83       	std	Y+5, r24	; 0x05
	 int i;
	 int len = strlen(string);
 2dc:	8d 81       	ldd	r24, Y+5	; 0x05
 2de:	9e 81       	ldd	r25, Y+6	; 0x06
 2e0:	0e 94 c3 02 	call	0x586	; 0x586 <strlen>
 2e4:	9c 83       	std	Y+4, r25	; 0x04
 2e6:	8b 83       	std	Y+3, r24	; 0x03
	 	for (i=0; i<len; i++){
 2e8:	1a 82       	std	Y+2, r1	; 0x02
 2ea:	19 82       	std	Y+1, r1	; 0x01
 2ec:	0f c0       	rjmp	.+30     	; 0x30c <send_string+0x42>
	 		send_char(string[i]);
 2ee:	89 81       	ldd	r24, Y+1	; 0x01
 2f0:	9a 81       	ldd	r25, Y+2	; 0x02
 2f2:	2d 81       	ldd	r18, Y+5	; 0x05
 2f4:	3e 81       	ldd	r19, Y+6	; 0x06
 2f6:	82 0f       	add	r24, r18
 2f8:	93 1f       	adc	r25, r19
 2fa:	fc 01       	movw	r30, r24
 2fc:	80 81       	ld	r24, Z
 2fe:	0e 94 4b 01 	call	0x296	; 0x296 <send_char>

//	send string
void send_string(char* string){
	 int i;
	 int len = strlen(string);
	 	for (i=0; i<len; i++){
 302:	89 81       	ldd	r24, Y+1	; 0x01
 304:	9a 81       	ldd	r25, Y+2	; 0x02
 306:	01 96       	adiw	r24, 0x01	; 1
 308:	9a 83       	std	Y+2, r25	; 0x02
 30a:	89 83       	std	Y+1, r24	; 0x01
 30c:	29 81       	ldd	r18, Y+1	; 0x01
 30e:	3a 81       	ldd	r19, Y+2	; 0x02
 310:	8b 81       	ldd	r24, Y+3	; 0x03
 312:	9c 81       	ldd	r25, Y+4	; 0x04
 314:	28 17       	cp	r18, r24
 316:	39 07       	cpc	r19, r25
 318:	54 f3       	brlt	.-44     	; 0x2ee <send_string+0x24>
	 		send_char(string[i]);
	 	}
}
 31a:	26 96       	adiw	r28, 0x06	; 6
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	f8 94       	cli
 320:	de bf       	out	0x3e, r29	; 62
 322:	0f be       	out	0x3f, r0	; 63
 324:	cd bf       	out	0x3d, r28	; 61
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <get_char>:

//	get character
char get_char(){
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	cd b7       	in	r28, 0x3d	; 61
 332:	de b7       	in	r29, 0x3e	; 62
 	while(!(UCSR0A & (bit(RXC0))));	// wait until all data in receive buffer is read
 334:	00 00       	nop
 336:	80 ec       	ldi	r24, 0xC0	; 192
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	fc 01       	movw	r30, r24
 33c:	80 81       	ld	r24, Z
 33e:	88 23       	and	r24, r24
 340:	d4 f7       	brge	.-12     	; 0x336 <get_char+0xa>
 	return UDR0;
 342:	86 ec       	ldi	r24, 0xC6	; 198
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	fc 01       	movw	r30, r24
 348:	80 81       	ld	r24, Z
}
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	08 95       	ret

00000350 <__cmpsf2>:
 350:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__fp_cmp>
 354:	08 f4       	brcc	.+2      	; 0x358 <__cmpsf2+0x8>
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	08 95       	ret

0000035a <__fixunssfsi>:
 35a:	0e 94 08 02 	call	0x410	; 0x410 <__fp_splitA>
 35e:	88 f0       	brcs	.+34     	; 0x382 <__fixunssfsi+0x28>
 360:	9f 57       	subi	r25, 0x7F	; 127
 362:	98 f0       	brcs	.+38     	; 0x38a <__fixunssfsi+0x30>
 364:	b9 2f       	mov	r27, r25
 366:	99 27       	eor	r25, r25
 368:	b7 51       	subi	r27, 0x17	; 23
 36a:	b0 f0       	brcs	.+44     	; 0x398 <__fixunssfsi+0x3e>
 36c:	e1 f0       	breq	.+56     	; 0x3a6 <__fixunssfsi+0x4c>
 36e:	66 0f       	add	r22, r22
 370:	77 1f       	adc	r23, r23
 372:	88 1f       	adc	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	1a f0       	brmi	.+6      	; 0x37e <__fixunssfsi+0x24>
 378:	ba 95       	dec	r27
 37a:	c9 f7       	brne	.-14     	; 0x36e <__fixunssfsi+0x14>
 37c:	14 c0       	rjmp	.+40     	; 0x3a6 <__fixunssfsi+0x4c>
 37e:	b1 30       	cpi	r27, 0x01	; 1
 380:	91 f0       	breq	.+36     	; 0x3a6 <__fixunssfsi+0x4c>
 382:	0e 94 22 02 	call	0x444	; 0x444 <__fp_zero>
 386:	b1 e0       	ldi	r27, 0x01	; 1
 388:	08 95       	ret
 38a:	0c 94 22 02 	jmp	0x444	; 0x444 <__fp_zero>
 38e:	67 2f       	mov	r22, r23
 390:	78 2f       	mov	r23, r24
 392:	88 27       	eor	r24, r24
 394:	b8 5f       	subi	r27, 0xF8	; 248
 396:	39 f0       	breq	.+14     	; 0x3a6 <__fixunssfsi+0x4c>
 398:	b9 3f       	cpi	r27, 0xF9	; 249
 39a:	cc f3       	brlt	.-14     	; 0x38e <__fixunssfsi+0x34>
 39c:	86 95       	lsr	r24
 39e:	77 95       	ror	r23
 3a0:	67 95       	ror	r22
 3a2:	b3 95       	inc	r27
 3a4:	d9 f7       	brne	.-10     	; 0x39c <__fixunssfsi+0x42>
 3a6:	3e f4       	brtc	.+14     	; 0x3b6 <__fixunssfsi+0x5c>
 3a8:	90 95       	com	r25
 3aa:	80 95       	com	r24
 3ac:	70 95       	com	r23
 3ae:	61 95       	neg	r22
 3b0:	7f 4f       	sbci	r23, 0xFF	; 255
 3b2:	8f 4f       	sbci	r24, 0xFF	; 255
 3b4:	9f 4f       	sbci	r25, 0xFF	; 255
 3b6:	08 95       	ret

000003b8 <__fp_cmp>:
 3b8:	99 0f       	add	r25, r25
 3ba:	00 08       	sbc	r0, r0
 3bc:	55 0f       	add	r21, r21
 3be:	aa 0b       	sbc	r26, r26
 3c0:	e0 e8       	ldi	r30, 0x80	; 128
 3c2:	fe ef       	ldi	r31, 0xFE	; 254
 3c4:	16 16       	cp	r1, r22
 3c6:	17 06       	cpc	r1, r23
 3c8:	e8 07       	cpc	r30, r24
 3ca:	f9 07       	cpc	r31, r25
 3cc:	c0 f0       	brcs	.+48     	; 0x3fe <__fp_cmp+0x46>
 3ce:	12 16       	cp	r1, r18
 3d0:	13 06       	cpc	r1, r19
 3d2:	e4 07       	cpc	r30, r20
 3d4:	f5 07       	cpc	r31, r21
 3d6:	98 f0       	brcs	.+38     	; 0x3fe <__fp_cmp+0x46>
 3d8:	62 1b       	sub	r22, r18
 3da:	73 0b       	sbc	r23, r19
 3dc:	84 0b       	sbc	r24, r20
 3de:	95 0b       	sbc	r25, r21
 3e0:	39 f4       	brne	.+14     	; 0x3f0 <__fp_cmp+0x38>
 3e2:	0a 26       	eor	r0, r26
 3e4:	61 f0       	breq	.+24     	; 0x3fe <__fp_cmp+0x46>
 3e6:	23 2b       	or	r18, r19
 3e8:	24 2b       	or	r18, r20
 3ea:	25 2b       	or	r18, r21
 3ec:	21 f4       	brne	.+8      	; 0x3f6 <__fp_cmp+0x3e>
 3ee:	08 95       	ret
 3f0:	0a 26       	eor	r0, r26
 3f2:	09 f4       	brne	.+2      	; 0x3f6 <__fp_cmp+0x3e>
 3f4:	a1 40       	sbci	r26, 0x01	; 1
 3f6:	a6 95       	lsr	r26
 3f8:	8f ef       	ldi	r24, 0xFF	; 255
 3fa:	81 1d       	adc	r24, r1
 3fc:	81 1d       	adc	r24, r1
 3fe:	08 95       	ret

00000400 <__fp_split3>:
 400:	57 fd       	sbrc	r21, 7
 402:	90 58       	subi	r25, 0x80	; 128
 404:	44 0f       	add	r20, r20
 406:	55 1f       	adc	r21, r21
 408:	59 f0       	breq	.+22     	; 0x420 <__fp_splitA+0x10>
 40a:	5f 3f       	cpi	r21, 0xFF	; 255
 40c:	71 f0       	breq	.+28     	; 0x42a <__fp_splitA+0x1a>
 40e:	47 95       	ror	r20

00000410 <__fp_splitA>:
 410:	88 0f       	add	r24, r24
 412:	97 fb       	bst	r25, 7
 414:	99 1f       	adc	r25, r25
 416:	61 f0       	breq	.+24     	; 0x430 <__fp_splitA+0x20>
 418:	9f 3f       	cpi	r25, 0xFF	; 255
 41a:	79 f0       	breq	.+30     	; 0x43a <__fp_splitA+0x2a>
 41c:	87 95       	ror	r24
 41e:	08 95       	ret
 420:	12 16       	cp	r1, r18
 422:	13 06       	cpc	r1, r19
 424:	14 06       	cpc	r1, r20
 426:	55 1f       	adc	r21, r21
 428:	f2 cf       	rjmp	.-28     	; 0x40e <__fp_split3+0xe>
 42a:	46 95       	lsr	r20
 42c:	f1 df       	rcall	.-30     	; 0x410 <__fp_splitA>
 42e:	08 c0       	rjmp	.+16     	; 0x440 <__fp_splitA+0x30>
 430:	16 16       	cp	r1, r22
 432:	17 06       	cpc	r1, r23
 434:	18 06       	cpc	r1, r24
 436:	99 1f       	adc	r25, r25
 438:	f1 cf       	rjmp	.-30     	; 0x41c <__fp_splitA+0xc>
 43a:	86 95       	lsr	r24
 43c:	71 05       	cpc	r23, r1
 43e:	61 05       	cpc	r22, r1
 440:	08 94       	sec
 442:	08 95       	ret

00000444 <__fp_zero>:
 444:	e8 94       	clt

00000446 <__fp_szero>:
 446:	bb 27       	eor	r27, r27
 448:	66 27       	eor	r22, r22
 44a:	77 27       	eor	r23, r23
 44c:	cb 01       	movw	r24, r22
 44e:	97 f9       	bld	r25, 7
 450:	08 95       	ret

00000452 <__gesf2>:
 452:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__fp_cmp>
 456:	08 f4       	brcc	.+2      	; 0x45a <__gesf2+0x8>
 458:	8f ef       	ldi	r24, 0xFF	; 255
 45a:	08 95       	ret

0000045c <__mulsf3>:
 45c:	0e 94 41 02 	call	0x482	; 0x482 <__mulsf3x>
 460:	0c 94 b2 02 	jmp	0x564	; 0x564 <__fp_round>
 464:	0e 94 a4 02 	call	0x548	; 0x548 <__fp_pscA>
 468:	38 f0       	brcs	.+14     	; 0x478 <__mulsf3+0x1c>
 46a:	0e 94 ab 02 	call	0x556	; 0x556 <__fp_pscB>
 46e:	20 f0       	brcs	.+8      	; 0x478 <__mulsf3+0x1c>
 470:	95 23       	and	r25, r21
 472:	11 f0       	breq	.+4      	; 0x478 <__mulsf3+0x1c>
 474:	0c 94 9b 02 	jmp	0x536	; 0x536 <__fp_inf>
 478:	0c 94 a1 02 	jmp	0x542	; 0x542 <__fp_nan>
 47c:	11 24       	eor	r1, r1
 47e:	0c 94 23 02 	jmp	0x446	; 0x446 <__fp_szero>

00000482 <__mulsf3x>:
 482:	0e 94 00 02 	call	0x400	; 0x400 <__fp_split3>
 486:	70 f3       	brcs	.-36     	; 0x464 <__mulsf3+0x8>

00000488 <__mulsf3_pse>:
 488:	95 9f       	mul	r25, r21
 48a:	c1 f3       	breq	.-16     	; 0x47c <__mulsf3+0x20>
 48c:	95 0f       	add	r25, r21
 48e:	50 e0       	ldi	r21, 0x00	; 0
 490:	55 1f       	adc	r21, r21
 492:	62 9f       	mul	r22, r18
 494:	f0 01       	movw	r30, r0
 496:	72 9f       	mul	r23, r18
 498:	bb 27       	eor	r27, r27
 49a:	f0 0d       	add	r31, r0
 49c:	b1 1d       	adc	r27, r1
 49e:	63 9f       	mul	r22, r19
 4a0:	aa 27       	eor	r26, r26
 4a2:	f0 0d       	add	r31, r0
 4a4:	b1 1d       	adc	r27, r1
 4a6:	aa 1f       	adc	r26, r26
 4a8:	64 9f       	mul	r22, r20
 4aa:	66 27       	eor	r22, r22
 4ac:	b0 0d       	add	r27, r0
 4ae:	a1 1d       	adc	r26, r1
 4b0:	66 1f       	adc	r22, r22
 4b2:	82 9f       	mul	r24, r18
 4b4:	22 27       	eor	r18, r18
 4b6:	b0 0d       	add	r27, r0
 4b8:	a1 1d       	adc	r26, r1
 4ba:	62 1f       	adc	r22, r18
 4bc:	73 9f       	mul	r23, r19
 4be:	b0 0d       	add	r27, r0
 4c0:	a1 1d       	adc	r26, r1
 4c2:	62 1f       	adc	r22, r18
 4c4:	83 9f       	mul	r24, r19
 4c6:	a0 0d       	add	r26, r0
 4c8:	61 1d       	adc	r22, r1
 4ca:	22 1f       	adc	r18, r18
 4cc:	74 9f       	mul	r23, r20
 4ce:	33 27       	eor	r19, r19
 4d0:	a0 0d       	add	r26, r0
 4d2:	61 1d       	adc	r22, r1
 4d4:	23 1f       	adc	r18, r19
 4d6:	84 9f       	mul	r24, r20
 4d8:	60 0d       	add	r22, r0
 4da:	21 1d       	adc	r18, r1
 4dc:	82 2f       	mov	r24, r18
 4de:	76 2f       	mov	r23, r22
 4e0:	6a 2f       	mov	r22, r26
 4e2:	11 24       	eor	r1, r1
 4e4:	9f 57       	subi	r25, 0x7F	; 127
 4e6:	50 40       	sbci	r21, 0x00	; 0
 4e8:	9a f0       	brmi	.+38     	; 0x510 <__mulsf3_pse+0x88>
 4ea:	f1 f0       	breq	.+60     	; 0x528 <__mulsf3_pse+0xa0>
 4ec:	88 23       	and	r24, r24
 4ee:	4a f0       	brmi	.+18     	; 0x502 <__mulsf3_pse+0x7a>
 4f0:	ee 0f       	add	r30, r30
 4f2:	ff 1f       	adc	r31, r31
 4f4:	bb 1f       	adc	r27, r27
 4f6:	66 1f       	adc	r22, r22
 4f8:	77 1f       	adc	r23, r23
 4fa:	88 1f       	adc	r24, r24
 4fc:	91 50       	subi	r25, 0x01	; 1
 4fe:	50 40       	sbci	r21, 0x00	; 0
 500:	a9 f7       	brne	.-22     	; 0x4ec <__mulsf3_pse+0x64>
 502:	9e 3f       	cpi	r25, 0xFE	; 254
 504:	51 05       	cpc	r21, r1
 506:	80 f0       	brcs	.+32     	; 0x528 <__mulsf3_pse+0xa0>
 508:	0c 94 9b 02 	jmp	0x536	; 0x536 <__fp_inf>
 50c:	0c 94 23 02 	jmp	0x446	; 0x446 <__fp_szero>
 510:	5f 3f       	cpi	r21, 0xFF	; 255
 512:	e4 f3       	brlt	.-8      	; 0x50c <__mulsf3_pse+0x84>
 514:	98 3e       	cpi	r25, 0xE8	; 232
 516:	d4 f3       	brlt	.-12     	; 0x50c <__mulsf3_pse+0x84>
 518:	86 95       	lsr	r24
 51a:	77 95       	ror	r23
 51c:	67 95       	ror	r22
 51e:	b7 95       	ror	r27
 520:	f7 95       	ror	r31
 522:	e7 95       	ror	r30
 524:	9f 5f       	subi	r25, 0xFF	; 255
 526:	c1 f7       	brne	.-16     	; 0x518 <__mulsf3_pse+0x90>
 528:	fe 2b       	or	r31, r30
 52a:	88 0f       	add	r24, r24
 52c:	91 1d       	adc	r25, r1
 52e:	96 95       	lsr	r25
 530:	87 95       	ror	r24
 532:	97 f9       	bld	r25, 7
 534:	08 95       	ret

00000536 <__fp_inf>:
 536:	97 f9       	bld	r25, 7
 538:	9f 67       	ori	r25, 0x7F	; 127
 53a:	80 e8       	ldi	r24, 0x80	; 128
 53c:	70 e0       	ldi	r23, 0x00	; 0
 53e:	60 e0       	ldi	r22, 0x00	; 0
 540:	08 95       	ret

00000542 <__fp_nan>:
 542:	9f ef       	ldi	r25, 0xFF	; 255
 544:	80 ec       	ldi	r24, 0xC0	; 192
 546:	08 95       	ret

00000548 <__fp_pscA>:
 548:	00 24       	eor	r0, r0
 54a:	0a 94       	dec	r0
 54c:	16 16       	cp	r1, r22
 54e:	17 06       	cpc	r1, r23
 550:	18 06       	cpc	r1, r24
 552:	09 06       	cpc	r0, r25
 554:	08 95       	ret

00000556 <__fp_pscB>:
 556:	00 24       	eor	r0, r0
 558:	0a 94       	dec	r0
 55a:	12 16       	cp	r1, r18
 55c:	13 06       	cpc	r1, r19
 55e:	14 06       	cpc	r1, r20
 560:	05 06       	cpc	r0, r21
 562:	08 95       	ret

00000564 <__fp_round>:
 564:	09 2e       	mov	r0, r25
 566:	03 94       	inc	r0
 568:	00 0c       	add	r0, r0
 56a:	11 f4       	brne	.+4      	; 0x570 <__fp_round+0xc>
 56c:	88 23       	and	r24, r24
 56e:	52 f0       	brmi	.+20     	; 0x584 <__fp_round+0x20>
 570:	bb 0f       	add	r27, r27
 572:	40 f4       	brcc	.+16     	; 0x584 <__fp_round+0x20>
 574:	bf 2b       	or	r27, r31
 576:	11 f4       	brne	.+4      	; 0x57c <__fp_round+0x18>
 578:	60 ff       	sbrs	r22, 0
 57a:	04 c0       	rjmp	.+8      	; 0x584 <__fp_round+0x20>
 57c:	6f 5f       	subi	r22, 0xFF	; 255
 57e:	7f 4f       	sbci	r23, 0xFF	; 255
 580:	8f 4f       	sbci	r24, 0xFF	; 255
 582:	9f 4f       	sbci	r25, 0xFF	; 255
 584:	08 95       	ret

00000586 <strlen>:
 586:	fc 01       	movw	r30, r24
 588:	01 90       	ld	r0, Z+
 58a:	00 20       	and	r0, r0
 58c:	e9 f7       	brne	.-6      	; 0x588 <strlen+0x2>
 58e:	80 95       	com	r24
 590:	90 95       	com	r25
 592:	8e 0f       	add	r24, r30
 594:	9f 1f       	adc	r25, r31
 596:	08 95       	ret

00000598 <_exit>:
 598:	f8 94       	cli

0000059a <__stop_program>:
 59a:	ff cf       	rjmp	.-2      	; 0x59a <__stop_program>
